# simple namespace 1

--Input
(ns com.example.my-app)
--Input

--Expected
{
  "nsSymbol": "com.example.my-app"
}
--Expected

# simple namespace 2

--Input
(
  ns com.example.my-app

)
--Input

--Expected
{
  "nsSymbol": "com.example.my-app"
}
--Expected

# namespace with multiple :require

--Input
(ns com.example.my-app
  (:require com.example.my-app.bbb [com.example.my-app.ccc])
  (:require com.example.my-app.aaa)
  )
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "requires": [
    {
      "symbol": "com.example.my-app.aaa"
    },
    {
      "symbol": "com.example.my-app.bbb"
    },
    {
      "symbol": "com.example.my-app.ccc"
    }
  ]
}
--Expected

# namespace with require + imports

--Input
(ns com.example.my-app
  (:require com.example.my-app.bbb com.example.my-app.ccc com.example.my-app.aaa)
  (:import java.io.File
           (xxx.yyy.zzz Bravo Alpha Delta Charlie)
           hhh.eee.Ccc
           hhh.eee.Bbb
           (java.util Date UUID))
  )
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "imports": [
    {
      "package": "hhh.eee",
      "classes": ["Bbb", "Ccc"]
    },
    {
      "package": "java.io",
      "classes": ["File"]
    },
    {
      "package": "java.util",
      "classes": ["Date", "UUID"]
    },
    {
      "package": "xxx.yyy.zzz",
      "classes": ["Alpha", "Bravo", "Charlie", "Delta"]
    }
  ],
  "requires": [
    {
      "symbol": "com.example.my-app.aaa"
    },
    {
      "symbol": "com.example.my-app.bbb"
    },
    {
      "symbol": "com.example.my-app.ccc"
    }
  ]
}
--Expected

# namespace with :require :as

--Input
(ns com.example.my-app
  (:require com.example.my-app.bbb [com.example.my-app.ccc :as ccc])
  (:require [com.example.my-app.aaa :as aaa)
  )
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "requires": [
    {
      "as": "aaa",
      "symbol": "com.example.my-app.aaa"
    },
    {
      "symbol": "com.example.my-app.bbb"
    },
    {
      "as": "ccc",
      "symbol": "com.example.my-app.ccc"
    }
  ]
}
--Expected

# namespace with :refer-clojure :exclude

--Input
(ns com.example.my-app
  (:refer-clojure :exclude [print get nth]))
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "referClojure": {
    "exclude": [
      {"symbol": "get"},
      {"symbol": "nth"},
      {"symbol": "print"}
    ]
  }
}
--Expected

# namespace with :refer-clojure :only

--Input
(ns com.example.my-app
  (:refer-clojure :only [set conj number? get ==]))
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "referClojure": {
    "only": [
      {"symbol": "=="},
      {"symbol": "conj"},
      {"symbol": "get"},
      {"symbol": "number?"},
      {"symbol": "set"}
    ]
  }
}
--Expected

# namespace with :refer-clojure :rename

--Input
(ns com.example.my-app
  (:require bbb.ccc bbb, aaa)
  (:refer-clojure :rename {print core-print get g,  number? is-number ->> thread-last}
  )
  )
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "referClojure": {
    "rename": [
      {
        "fromSymbol": "->>",
        "toSymbol": "thread-last"
      },
      {
        "fromSymbol": "get",
        "toSymbol": "g"
      },
      {
        "fromSymbol": "number?",
        "toSymbol": "is-number"
      },
      {
        "fromSymbol": "print",
        "toSymbol": "core-print"
      }
    ]
  },
  "requires": [
    {
      "symbol": "aaa"
    },
    {
      "symbol": "bbb"
    },
    {
      "symbol": "bbb.ccc"
    }
  ]
}
--Expected

# refer-clojure with reader conditionals 1

--Input
(ns com.example.my-app
  (:refer-clojure :only [#?@(:cljs [dissoc conj])]))
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "referClojure": {
    "only": [
      {
        "symbol": "conj",
        "platform": ":cljs"
      },
      {
        "symbol": "dissoc",
        "platform": ":cljs"
      }
    ]
  }
}
--Expected

# namespace with :require, :refer, :as

--Input
(ns com.example.my-app
  (:require
    [com.example.duck :as duck :refer [quack quacking eat sleep]]
    aaa.bbb
    [com.example.cow :refer [moo eat-grass] :as cow]))
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "requires": [
    {
      "symbol": "aaa.bbb"
    },
    {
      "as": "cow",
      "symbol": "com.example.cow",
      "refer": ["eat-grass", "moo"]
    },
    {
      "as": "duck",
      "symbol": "com.example.duck",
      "refer": ["eat", "quack", "quacking", "sleep"]
    }
  ]
}
--Expected

# namespace with :require :refer :all

--Input
(ns com.example.my-app
  (:require
    [com.example.duck :as duck :refer :all]
    aaa.bbb
    [com.example.cow :refer [moo eat-grass] :as cow]))
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "requires": [
    {
      "symbol": "aaa.bbb"
    },
    {
      "as": "cow",
      "symbol": "com.example.cow",
      "refer": ["eat-grass", "moo"]
    },
    {
      "as": "duck",
      "symbol": "com.example.duck",
      "refer": "all"
    }
  ]
}
--Expected

# namespace with docstring

--Input
(ns com.example.my-app
  "Mary had a little lamb
  Its fleece was white as snow")
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "docstring": "Mary had a little lamb\n  Its fleece was white as snow"
}
--Expected

# namespace with require comments

--Input
(ns com.example.my-app
  (:require
    [com.example.duck :as duck :refer [quack quacking eat sleep]] ; NOTE: this ns is primarily focused on Mallards
    ;; include aaa.bbb for reasons
;; please see Issue #NaN for deeper explanation
    aaa.bbb
    ;; the cow namespace is deprecated, please refactor
    [com.example.cow :refer [moo eat-grass] :as cow]) ;; the cow goes "moo"
    )
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "requires": [
    {
      "commentsAbove": [
        ";; include aaa.bbb for reasons",
        ";; please see Issue #NaN for deeper explanation"
      ],
      "symbol": "aaa.bbb"
    },
    {
      "as": "cow",
      "commentsAbove": [";; the cow namespace is deprecated, please refactor"],
      "commentAfter": ";; the cow goes \"moo\"",
      "symbol": "com.example.cow",
      "refer": ["eat-grass", "moo"]
    },
    {
      "as": "duck",
      "commentAfter": "; NOTE: this ns is primarily focused on Mallards",
      "symbol": "com.example.duck",
      "refer": ["eat", "quack", "quacking", "sleep"]
    }
  ]
}
--Expected

# namespace with require comments 2

--Input
(ns com.example.my-app
  (:require
    #_{:clj-kondo/ignore [:discouraged-namespace]}
    [com.example.bbb :as bbb]
    [com.example.aaa] #_ "AAA"
    ))
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "requires": [
    {
      "commentAfter": "#_ \"AAA\"",
      "symbol": "com.example.aaa"
    },
    {
      "as": "bbb",
      "commentsAbove": ["#_{:clj-kondo/ignore [:discouraged-namespace]}"],
      "symbol": "com.example.bbb"
    }
  ]
}
--Expected

# namespace with import comments

> NOTE: in this test case, the ";; fin" comment is ignored by the parser
> We should probably print it after the (ns) form

--Input
(ns com.example.my-app
  ;;; I'm a little teapot
  ;;; Short and stout
  (:import ; Here is my handle

  ;; Here is my spout
;; When I get all steamed up
     (java.util Date UUID) ; Hear me shout
     ;; Tip me over
     ;; And pour me out!
     aaa.bbb.Ccc ;; HTTP 418
;; fin
  )
  )
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "importCommentsAbove": [
    ";;; I'm a little teapot",
    ";;; Short and stout"
  ],
  "importCommentAfter": "; Here is my handle",
  "imports": [
    {
      "classes": ["Ccc"],
      "commentsAbove": [
        ";; Tip me over",
        ";; And pour me out!"
      ],
      "commentAfter": ";; HTTP 418",
      "package": "aaa.bbb"
    },
    {
      "commentsAbove": [
        ";; Here is my spout",
        ";; When I get all steamed up"
      ],
      "commentAfter": "; Hear me shout",
      "classes": ["Date", "UUID"],
      "package": "java.util"
    }
  ]
}
--Expected

# namespace with refer-clojure comments

--Input
(ns com.example.my-app
  ;; aaa
  ;; bbb
  (:refer-clojure :only [number? -> set])) ; ccc
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "referClojureCommentsAbove": [
    ";; aaa",
    ";; bbb"
  ],
  "referClojureCommentAfter": "; ccc",
  "referClojure": {
    "only": [
      {"symbol": "->"},
      {"symbol": "number?"},
      {"symbol": "set"}
    ]
  },
  "commentOutsideNsForm": "; ccc"
}
--Expected

> TODO: need a test for ns.requireCommentsAbove

# namespace with comment outside ns form

--Input
(ns com.example.my-app
  ;; aaa
  ;; bbb
  (:require [aaa :as a])) ;; if only it were this easy
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "requireCommentsAbove": [
    ";; aaa",
    ";; bbb"
  ],
  "requires": [
    {
      "as": "a",
      "commentAfter": ";; if only it were this easy",
      "symbol": "aaa"
    }
  ],
  "commentOutsideNsForm": ";; if only it were this easy"
}
--Expected

# expand prefix lists in require

--Input
(ns com.example.my-app
  (:require
    (com.example client server routes)
    com.example.aaa
    [com.example bbb ccc]
    [com.example.xxx zzz yyy]
    ))
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "requires": [
    {
      "symbol": "com.example.aaa"
    },
    {
      "symbol": "com.example.bbb"
    },
    {
      "symbol": "com.example.ccc"
    },
    {
      "symbol": "com.example.client"
    },
    {
      "symbol": "com.example.routes"
    },
    {
      "symbol": "com.example.server"
    },
    {
      "symbol": "com.example.xxx.yyy"
    },
    {
      "symbol": "com.example.xxx.zzz"
    }
  ]
}
--Expected

# prefix lists with comments

--Input
(ns com.example.my-app
  (:require
    ;; aaa
    ;; bbb
    (com.example server client routes) ;; ccc
    com.example.db))
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "requires": [
    {
      "commentsAbove": [
        ";; aaa",
        ";; bbb"
      ],
      "commentAfter": ";; ccc",
      "symbol": "com.example.client"
    },
    {
      "symbol": "com.example.db"
    },
    {
      "symbol": "com.example.routes"
    },
    {
      "symbol": "com.example.server"
    }
  ]
}
--Expected

# reader conditionals in ns 1

--Input
(ns com.example.my-app
  (:require
    #?(:clj  [com.example.eee]
       :cljs [com.example.ddd])
    com.example.fff
    #?(:cljs com.example.bbb)
    com.example.ccc
    #?(:clj com.example.aaa)
    ))
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "requires": [
    {
      "platform": ":clj",
      "symbol": "com.example.aaa"
    },
    {
      "platform": ":cljs",
      "symbol": "com.example.bbb"
    },
    {
      "symbol": "com.example.ccc"
    },
    {
      "platform": ":cljs",
      "symbol": "com.example.ddd"
    },
    {
      "platform": ":clj",
      "symbol": "com.example.eee"
    },
    {
      "symbol": "com.example.fff"
    }
  ]
}
--Expected

# reader conditionals in ns 2

--Input
(ns com.example.my-app
  (:require
    #?(:clj  [com.example.eee]
       :cljs [com.example.ddd :as d] ;; ddd
       :elephant com.example.yyy)
    com.example.fff
    #?@(:cljs [com.example.bbb-cljs]
        :elephant [com.example.bbb-elephant]
        :default [com.example.bbb-default])
    com.example.ccc
    #?(:clj com.example.aaa)
    ))
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "requires": [
    {
      "platform": ":clj",
      "symbol": "com.example.aaa"
    },
    {
      "platform": ":cljs",
      "symbol": "com.example.bbb-cljs"
    },
    {
      "platform": ":default",
      "symbol": "com.example.bbb-default"
    },
    {
      "platform": ":elephant",
      "symbol": "com.example.bbb-elephant"
    },
    {
      "symbol": "com.example.ccc"
    },
    {
      "as": "d",
      "commentAfter": ";; ddd",
      "platform": ":cljs",
      "symbol": "com.example.ddd"
    },
    {
      "platform": ":clj",
      "symbol": "com.example.eee"
    },
    {
      "symbol": "com.example.fff"
    },
    {
      "platform": ":elephant",
      "symbol": "com.example.yyy"
    }
  ]
}
--Expected

# reader conditionals in ns 3

--Input
(ns com.example.module-test
  (:require #?(:clj  [clojure.test :refer :all]
               :cljs [cljs.test :refer-macros [is]])
            #?(:cljs [cljs.test.check :refer [quick-check]]) ;; aaa
            #?(:clj  [clojure.test.check.clojure-test :refer [defspec]]
               :cljs [cljs.test.check.cljs-test :refer-macros [defspec]])
            #?(:clj  [clojure.test.check.properties :as prop]
               :cljs [cljs.test.check.properties :as prop
                       :include-macros true])
            [schema.core :as schema :refer [check]]
            [com.example.schema.ids :refer [Foo]]
            [com.example.generators
             :refer [gen-part-no gen-invalid-part-no]]))
--Input

--Expected
{
  "nsSymbol": "com.example.module-test",
  "requires": [
    {
      "platform": ":cljs",
      "referMacros": ["is"],
      "symbol": "cljs.test"
    },
    {
      "commentAfter": ";; aaa",
      "platform": ":cljs",
      "refer": ["quick-check"],
      "symbol": "cljs.test.check"
    },
    {
      "platform": ":cljs",
      "referMacros": ["defspec"],
      "symbol": "cljs.test.check.cljs-test"
    },
    {
      "as": "prop",
      "includeMacros": true,
      "platform": ":cljs",
      "symbol": "cljs.test.check.properties"
    },
    {
      "platform": ":clj",
      "refer": "all",
      "symbol": "clojure.test"
    },
    {
      "platform": ":clj",
      "refer": ["defspec"],
      "symbol": "clojure.test.check.clojure-test"
    },
    {
      "as": "prop",
      "platform": ":clj",
      "symbol": "clojure.test.check.properties"
    },
    {
      "refer": ["gen-invalid-part-no", "gen-part-no"],
      "symbol": "com.example.generators"
    },
    {
      "refer": ["Foo"],
      "symbol": "com.example.schema.ids"
    },
    {
      "as": "schema",
      "refer": ["check"],
      "symbol": "schema.core"
    }
  ]
}
--Expected

# reader conditionals in ns 4

--Input
(ns com.example.my-app
  (:require
    #?(:clj  [com.example.eee]
       :cljs [com.example.ddd :as d] ;; ddd
       :elephant com.example.yyy)
    com.example.fff
    #?@(:cljs [com.example.bbb-cljs]
        :elephant [com.example.bbb-elephant]
        :default [com.example.bbb-default])
    com.example.ccc
    #?(:clj com.example.aaa))

  (:import
    xxx.yyy.Zzz
    aaa.bbb.Ccc
    #?@(:cljs goog.string.StringBuffer
        :clj java.net.URI))

  #?(:clj
     (:import
      [java.io StringReader]
      java.net.InetAddress)

     :cljs
     (:import
      [goog.module ModuleManager]
      (goog.events EventType EventTarget)
      goog.Uri)))
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "imports": [
    {
      "classes": ["Ccc"],
      "package": "aaa.bbb"
    },
    {
      "classes": ["Uri"],
      "package": "goog",
      "platform": ":cljs"
    },
    {
      "classes": ["EventTarget", "EventType"],
      "package": "goog.events",
      "platform": ":cljs"
    },
    {
      "classes": ["ModuleManager"],
      "package": "goog.module",
      "platform": ":cljs"
    },
    {
      "classes": ["StringBuffer"],
      "package": "goog.string",
      "platform": ":cljs"
    },
    {
      "classes": ["StringReader"],
      "package": "java.io",
      "platform": ":clj"
    },
    {
      "classes": ["InetAddress", "URI"],
      "package": "java.net",
      "platform": ":clj"
    },
    {
      "classes": ["Zzz"],
      "package": "xxx.yyy"
    }
  ],
  "requires": [
    {
      "platform": ":clj",
      "symbol": "com.example.aaa"
    },
    {
      "platform": ":cljs",
      "symbol": "com.example.bbb-cljs"
    },
    {
      "platform": ":default",
      "symbol": "com.example.bbb-default"
    },
    {
      "platform": ":elephant",
      "symbol": "com.example.bbb-elephant"
    },
    {
      "symbol": "com.example.ccc"
    },
    {
      "as": "d",
      "commentAfter": ";; ddd",
      "platform": ":cljs",
      "symbol": "com.example.ddd"
    },
    {
      "platform": ":clj",
      "symbol": "com.example.eee"
    },
    {
      "symbol": "com.example.fff"
    },
    {
      "platform": ":elephant",
      "symbol": "com.example.yyy"
    }
  ]
}
--Expected

# require-macros 1

--Input
(ns bar.core
  (:require-macros [foo.core :refer [add]]))
--Input

--Expected
{
  "nsSymbol": "bar.core",
  "requireMacros": [
    {
      "refer": [
        {"symbol": "add"}
      ],
      "symbol": "foo.core"
    }
  ]
}
--Expected

# require-macros 2

--Input
(ns bar.core
  (:require-macros [foo.core :as foo])
  (:require [foo.core :as foo]))
--Input

--Expected
{
  "nsSymbol": "bar.core",
  "requireMacros": [
    {
      "as": "foo",
      "symbol": "foo.core"
    }
  ],
  "requires": [
    {
      "as": "foo",
      "symbol": "foo.core"
    }
  ]
}
--Expected

# require-macros 3

--Input
(ns foo.core
  (:require-macros foo.core))
--Input

--Expected
{
  "nsSymbol": "foo.core",
  "requireMacros": [
    {
      "symbol": "foo.core"
    }
  ]
}
--Expected

# require-macros 4

--Input
(ns bar.core
  (:require-macros [foo.core :refer [add] :as quizzle])
  (:require [foo.core :refer [subtract]]))
--Input

--Expected
{
  "nsSymbol": "bar.core",
  "requireMacros": [
    {
      "as": "quizzle",
      "refer": [
        {"symbol": "add"}
      ],
      "symbol": "foo.core"
    }
  ],
  "requires": [
    {
      "refer": ["subtract"],
      "symbol": "foo.core"
    }
  ]
}
--Expected

# require-macros 5

--Input
(ns bar.core
  (:require [foo.core :refer [subtract] :refer-macros [add]]))
--Input

--Expected
{
  "nsSymbol": "bar.core",
  "requires": [
    {
      "refer": ["subtract"],
      "referMacros": ["add"],
      "symbol": "foo.core"
    }
  ]
}
--Expected

# require-macros with comments 1

--Input
(ns bar.core
  ;; aaa
  ;; bbb
  ;; ccc
  (:require-macros [foo.core :refer [bad add cad]] ;; rad
  ;; xxx
  ;; yyy
  bar.core.util ;; util util util
        [biz.com :as bc :refer [qux zoom banana]] ;; biz-com!
        )    )
--Input

--Expected
{
  "nsSymbol": "bar.core",
  "requireMacrosCommentsAbove": [
    ";; aaa",
    ";; bbb",
    ";; ccc"
  ],
  "requireMacros": [
    {
      "commentsAbove": [
        ";; xxx",
        ";; yyy"
      ],
      "commentAfter": ";; util util util",
      "symbol": "bar.core.util"
    },
    {
      "as": "bc",
      "commentAfter": ";; biz-com!",
      "refer": [
        {"symbol": "banana"},
        {"symbol": "qux"},
        {"symbol": "zoom"}
      ],
      "symbol": "biz.com"
    },
    {
      "commentAfter": ";; rad",
      "refer": [
        {"symbol": "add"},
        {"symbol": "bad"},
        {"symbol": "cad"}
      ],
      "symbol": "foo.core"
    }
  ]
}
--Expected

# require-macros with comments 2

--Input
(ns bar.core
  (:require-macros
    [foo.core :refer [bad add cad]] ;; rad
    [aaa.bbb :refer [ccc]] ;; ddd
    ))
--Input

--Expected
{
  "nsSymbol": "bar.core",
  "requireMacros": [
    {
      "commentAfter": ";; ddd",
      "refer": [{"symbol": "ccc"}],
      "symbol": "aaa.bbb"
    },
    {
      "commentAfter": ";; rad",
      "refer": [
        {"symbol": "add"},
        {"symbol": "bad"},
        {"symbol": "cad"}
      ],
      "symbol": "foo.core"
    }
  ]
}
--Expected

# require-macros with comments 3

--Input
(ns com.example.my-app
  #?(:cljs
     (:require-macros
       [ccc.ddd :as d :refer [hhh ggg]]))) ;; ddd
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "requireMacros": [
    {
      "as": "d",
      "commentAfter": ";; ddd",
      "refer": [
        {
          "symbol": "ggg",
          "platform": ":cljs"
        },
        {
          "symbol": "hhh",
          "platform": ":cljs"
        }
      ],
      "platform": ":cljs",
      "symbol": "ccc.ddd"
    }
  ],
  "commentOutsideNsForm": ";; ddd"
}
--Expected

# ClojureScript ns test 1

--Input
(ns bar.core
  (:require [foo.core :as foo :include-macros true]))
--Input

--Expected
{
  "nsSymbol": "bar.core",
  "requires": [
    {
      "as": "foo",
      "includeMacros": true,
      "symbol": "foo.core"
    }
  ]
}
--Expected

# ClojureScript ns test 2

--Input
(ns cljs.ns-test
  (:refer-clojure :exclude [+ for] :rename {mapv core-mapv})
  (:require-macros [clojure.core :as lang :refer [when when-let] :rename {when always
                                                                          when-let always-let}]
                   [cljs.test :refer [deftest is]]))
--Input

--Expected
{
  "nsSymbol": "cljs.ns-test",
  "referClojure": {
    "exclude": [
      {"symbol": "+"},
      {"symbol": "for"}
    ],
    "rename": [
      {
        "fromSymbol": "mapv",
        "toSymbol": "core-mapv"
      }
    ]
  },
  "requireMacros": [
    {
      "refer": [
        {"symbol": "deftest"},
        {"symbol": "is"}
      ],
      "symbol": "cljs.test"
    },
    {
      "as": "lang",
      "refer": [
        {"symbol": "when"},
        {"symbol": "when-let"}
      ],
      "rename": [
        {
          "fromSymbol": "when",
          "toSymbol": "always"
        },
        {
          "fromSymbol": "when-let",
          "toSymbol": "always-let"
        }
      ],
      "symbol": "clojure.core"
    }
  ]
}
--Expected

# ClojureScript ns test 3

--Input
(ns cljs.spec.gen.alpha
  (:refer-clojure :exclude [boolean cat hash-map list map not-empty set vector
                            char double int keyword symbol string uuid delay shuffle])
  (:require-macros [cljs.core :as c]
                   [cljs.spec.gen.alpha :as gen :refer [dynaload lazy-combinators lazy-prims]])
  (:require [cljs.core :as c])
  (:import (goog Uri)))
--Input

--Expected
{
  "nsSymbol": "cljs.spec.gen.alpha",
  "imports": [
    {
      "classes": ["Uri"],
      "package": "goog"
    }
  ],
  "referClojure": {
    "exclude": [
      {"symbol": "boolean"},
      {"symbol": "cat"},
      {"symbol": "char"},
      {"symbol": "delay"},
      {"symbol": "double"},
      {"symbol": "hash-map"},
      {"symbol": "int"},
      {"symbol": "keyword"},
      {"symbol": "list"},
      {"symbol": "map"},
      {"symbol": "not-empty"},
      {"symbol": "set"},
      {"symbol": "shuffle"},
      {"symbol": "string"},
      {"symbol": "symbol"},
      {"symbol": "uuid"},
      {"symbol": "vector"}
    ]
  },
  "requireMacros": [
    {
      "as": "c",
      "symbol": "cljs.core"
    },
    {
      "as": "gen",
      "refer": [
        {"symbol": "dynaload"},
        {"symbol": "lazy-combinators"},
        {"symbol": "lazy-prims"}
      ],
      "symbol": "cljs.spec.gen.alpha"
    }
  ],
  "requires": [
    {
      "as": "c",
      "symbol": "cljs.core"
    }
  ]
}
--Expected

# sente example

--Input
(ns taoensso.sente
  (:require
    #?@(:clj  [[clojure.string :as str]
               [clojure.core.async :as async]
               [taoensso.encore :as enc]
               [taoensso.timbre :as timbre]
               [taoensso.sente.interfaces :as interfaces]]
        :cljs [[clojure.string :as str]
               [cljs.core.async :as async]
               [taoensso.encore :as enc]
               [taoensso.sente.interfaces :as interfaces]]))
  #?(:cljs (:require-macros
             [cljs.core.async.macros :as asyncm :refer (go go-loop)]
             [taoensso.encore :as enc :refer (have? have have-in)])))
--Input

--Expected
{
  "nsSymbol": "taoensso.sente",
  "requires": [
    {
      "as": "async",
      "platform": ":cljs",
      "symbol": "cljs.core.async"
    },
    {
      "as": "async",
      "platform": ":clj",
      "symbol": "clojure.core.async"
    },
    {
      "as": "str",
      "platform": ":clj",
      "symbol": "clojure.string"
    },
    {
      "as": "str",
      "platform": ":cljs",
      "symbol": "clojure.string"
    },
    {
      "as": "enc",
      "platform": ":clj",
      "symbol": "taoensso.encore"
    },
    {
      "as": "enc",
      "platform": ":cljs",
      "symbol": "taoensso.encore"
    },
    {
      "as": "interfaces",
      "platform": ":clj",
      "symbol": "taoensso.sente.interfaces"
    },
    {
      "as": "interfaces",
      "platform": ":cljs",
      "symbol": "taoensso.sente.interfaces"
    },
    {
      "as": "timbre",
      "platform": ":clj",
      "symbol": "taoensso.timbre"
    }
  ],
  "requireMacros": [
    {
      "as": "asyncm",
      "platform": ":cljs",
      "refer": [
        {
          "symbol": "go",
          "platform": ":cljs"
        },
        {
          "symbol": "go-loop",
          "platform": ":cljs"
        }
      ],
      "symbol": "cljs.core.async.macros"
    },
    {
      "as": "enc",
      "platform": ":cljs",
      "refer": [
        {
          "symbol": "have",
          "platform": ":cljs"
        },
        {
          "symbol": "have-in",
          "platform": ":cljs"
        },
        {
          "symbol": "have?",
          "platform": ":cljs"
        }
      ],
      "symbol": "taoensso.encore"
    }
  ]
}
--Expected

# basic gen-class

--Input
(ns com.example.my-app
  (:gen-class))
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "genClass": {
    "isEmpty": true
  }
}
--Expected

# gen-class with reader conditional

--Input
(ns com.example.my-app
  #?(:clj
     (:gen-class)))
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "genClass": {
    "isEmpty": true,
    "platform": ":clj"
  }
}
--Expected

# gen-class with reader conditional and comments

--Input
(ns com.example.my-app
  #?(:clj
  ;; zzz
     (:gen-class)))
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "genClass": {
    "commentsAbove": [";; zzz"],
    "isEmpty": true,
    "platform": ":clj"
  }
}
--Expected

# gen-class with comments 1

--Input
(ns com.example.my-app
  ;; aaa
  ;; bbb
  (:gen-class)) ;; ccc
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "genClass": {
    "commentsAbove": [";; aaa", ";; bbb"],
    "commentAfter": ";; ccc",
    "isEmpty": true
  },
  "commentOutsideNsForm": ";; ccc"
}
--Expected

# gen-class with comments 2

--Input
(ns com.example.my-app
  ;; aaa
  ;; bbb
  (:gen-class) ;; ccc
  )
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "genClass": {
    "commentsAbove": [";; aaa", ";; bbb"],
    "commentAfter": ";; ccc",
    "isEmpty": true
  }
}
--Expected

# gen-class with simple values

--Input
(ns com.example.my-app
  (:gen-class
    :name name2
    :extends java.lang.RuntimeException
    :init init2
    :post-init jjj
    :main true
    :factory fff
    :state state2
    :prefix "zzz-"
    :impl-ns iii
    :load-impl-ns false))
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "genClass": {
    "isEmpty": false,
    "name": {
      "value": "name2"
    },
    "extends": {
      "value": "java.lang.RuntimeException"
    },
    "init": {
      "value": "init2"
    },
    "post-init": {
      "value": "jjj"
    },
    "main": {
      "value": true
    },
    "factory": {
      "value": "fff"
    },
    "state": {
      "value": "state2"
    },
    "prefix": {
      "value": "\"zzz-\""
    },
    "impl-ns": {
      "value": "iii"
    },
    "load-impl-ns": {
      "value": false
    }
  }
}
--Expected

# gen-class simple values with comments

--Input
(ns com.example.my-app
  (:gen-class
    ;; aaa
    ;; bbb
    :name name2 ;; ccc
    ;; ddd
    :main false) ;; eee
  )
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "genClass": {
    "isEmpty": false,
    "name": {
      "commentsAbove": [
        ";; aaa",
        ";; bbb"
      ],
      "commentAfter": ";; ccc",
      "value": "name2"
    },
    "main": {
      "commentsAbove": [
        ";; ddd"
      ],
      "commentAfter": ";; eee",
      "value": false
    }
  }
}
--Expected

# cuerdas.core example

--Input
(ns cuerdas.core
  (:refer-clojure :exclude [contains? empty? repeat regexp?
                            replace reverse chars keyword concat
                            #?@(:clj [unquote format])])
  #?(:cljs (:require-macros [cuerdas.core :refer [unsafe-concat nilv]])) ;; require-macros!
  (:require [clojure.string :as str]
            [clojure.set :refer [map-invert]]
            [clojure.core :as c]

            [clojure.walk :refer [stringify-keys]]
            [cuerdas.regexp :as rx]

            #?(:cljs [goog.string :as gstr]) ;; ggg
            #?(:cljs [cljs.reader :as edn] ;; cljs-edn
               :clj  [clojure.edn :as edn])) ;; clj-edn
  #?(:clj (:import (java.util List Locale) ;; lll
                   (aaa.bbb Ddd Ccc)))) ;; aaa
--Input

--Expected
{
  "nsSymbol": "cuerdas.core",
  "referClojure": {
    "exclude": [
      {
        "symbol": "chars"
      },
      {
        "symbol": "concat"
      },
      {
        "symbol": "contains?"
      },
      {
        "symbol": "empty?"
      },
      {
        "symbol": "format",
        "platform": ":clj"
      },
      {
        "symbol": "keyword"
      },
      {
        "symbol": "regexp?"
      },
      {
        "symbol": "repeat"
      },
      {
        "symbol": "replace"
      },
      {
        "symbol": "reverse"
      },
      {
        "symbol": "unquote",
        "platform": ":clj"
      }
    ]
  },
  "requireMacros": [
    {
      "symbol": "cuerdas.core",
      "platform": ":cljs",
      "refer": [
        {
          "symbol": "nilv",
          "platform": ":cljs"
        },
        {
          "symbol": "unsafe-concat",
          "platform": ":cljs"
        }
      ],
      "commentAfter": ";; require-macros!"
    }
  ],
  "requires": [
    {
      "symbol": "cljs.reader",
      "platform": ":cljs",
      "as": "edn",
      "commentAfter": ";; cljs-edn"
    },
    {
      "symbol": "clojure.core",
      "as": "c"
    },
    {
      "symbol": "clojure.edn",
      "platform": ":clj",
      "as": "edn",
      "commentAfter": ";; clj-edn"
    },
    {
      "symbol": "clojure.set",
      "refer": [
        "map-invert"
      ]
    },
    {
      "symbol": "clojure.string",
      "as": "str"
    },
    {
      "symbol": "clojure.walk",
      "refer": [
        "stringify-keys"
      ]
    },
    {
      "symbol": "cuerdas.regexp",
      "as": "rx"
    },
    {
      "symbol": "goog.string",
      "platform": ":cljs",
      "as": "gstr",
      "commentAfter": ";; ggg"
    }
  ],
  "commentOutsideNsForm": ";; aaa",
  "imports": [
    {
      "package": "aaa.bbb",
      "classes": [
        "Ccc",
        "Ddd"
      ],
      "commentAfter": ";; aaa",
      "platform": ":clj"
    },
    {
      "package": "java.util",
      "classes": [
        "List",
        "Locale"
      ],
      "commentAfter": ";; lll",
      "platform": ":clj"
    }
  ]
}
--Expected

# namespace docstring 2

--Input
(ns com.oakmac.chessboard2.util.base58)

(def base58-chars
  "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")

(def default-length 12)

(defn random-base58
  "returns a random base58 string"
  ([]
   (random-base58 default-length))
  ([len]
   (apply str (take len (repeatedly #(rand-nth base58-chars))))))

--Input

--Expected
{
  "nsSymbol": "com.oakmac.chessboard2.util.base58"
}
--Expected

# metabase example 1

--Input
(ns metabase.shared.util.i18n
  (:require
   ["ttag" :as ttag]
   [clojure.string :as str])
  (:require-macros
   [metabase.shared.util.i18n]))
--Input

--Expected
{
  "nsSymbol": "metabase.shared.util.i18n",
  "requires": [
    {
      "symbol": "\"ttag\"",
      "symbolIsString": true,
      "as": "ttag"
    },
    {
      "symbol": "clojure.string",
      "as": "str"
    }
  ],
  "requireMacros": [
    {
      "symbol": "metabase.shared.util.i18n"
    }
  ]
}
--Expected

# reader macro comments

--Input
(ns com.example.my-app
  (:require
    ccc.ddd #_ #{"bugger"}
    #_ {:alpha "alpha"
        :bravo "bravo"}
    [aaa.bbb]))
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "requires": [
    {
      "commentsAbove": ["#_ {:alpha \"alpha\"\n        :bravo \"bravo\"}"],
      "symbol": "aaa.bbb"
    },
    {
      "commentAfter": "#_ #{\"bugger\"}",
      "symbol": "ccc.ddd"
    }
  ]
}
--Expected

# comment above ns form 1

--Input
;; aaa
(ns com.example.foo
  "bar")
--Input

--Expected
{
  "nsSymbol": "com.example.foo",
  "docstring": "bar"
}
--Expected

# comment above ns form 2

--Input
;; abc
;; def

(ns metabase.api.common
  "Dynamic variables and utility functions/macros for writing API functions."
  (:require
    [clojure.set :as set]
    [potemkin :as p]
    ))
--Input

--Expected
{
  "nsSymbol": "metabase.api.common",
  "docstring": "Dynamic variables and utility functions/macros for writing API functions.",
  "requires": [
    {
      "as": "set",
      "symbol": "clojure.set"
    },
    {
      "as": "p",
      "symbol": "potemkin"
    }
  ]
}
--Expected

# refer-clojure rename with comment and reader conditional

--Input
(ns com.example.my-app
  (:refer-clojure
    :rename  {get core-get
              #?@(:clj [conj core-conj])}))
                  ;:cljs [conj core-conj2])}))
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "referClojure": {
    "rename": [
      {
        "fromSymbol": "conj",
        "toSymbol": "core-conj",
        "platform": ":clj"
      },
      {
        "fromSymbol": "get",
        "toSymbol": "core-get"
      }
    ]
  }
}
--Expected
