# Simple namespace

--Input
(ns aaa)
--Input

--Expected
(ns aaa)
--Expected

# Simple namespace 2

--Input

(
  ns aaa
)
--Input

--Expected
(ns aaa)
--Expected

# how to ns: use keywords, not symbols

--Input
(ns com.example.my-application
  ;; aaa
  (refer-clojure :exclude [get])
  (require
   [clojure.string :as string])
  (import
   (java.util Date)))

(require
  foo
  bar)
--Input

--Expected
(ns com.example.my-application
  ;; aaa
  (:refer-clojure :exclude [get])
  (:require
   [clojure.string :as string])
  (:import
   (java.util Date)))

(require
  foo
  bar)
--Expected

# how to ns: use vectors, not lists

--Input
(ns com.example.application
  [:require
   [clojure.string :as string]]
  [:import
   (java.util Date)])

[:require
  foo
  bar]
--Input

--Expected
(ns com.example.application
  (:require
   [clojure.string :as string])
  (:import
   (java.util Date)))

[:require
 foo
 bar]
--Expected

# how to ns: use vectors for require

--Input
(ns com.example.application
  (:require
   (clojure.string :as string))
  [:import
   (java.util Date)])
--Input

--Expected
(ns com.example.application
  (:require
   [clojure.string :as string])
  (:import
   (java.util Date)))
--Expected

# how to ns: use parenthesis for import

--Input
(ns com.example.application
[:import
 [java.util Date UUID]
 [java.io File]])
--Input

--Expected
(ns com.example.application
  (:import
   (java.io File)
   (java.util Date UUID)))
--Expected

# how to ns: alphabetically sort requires

--Input
;; something before

(ns foo
  (:require b [c])
  (:require a))

(something :after)
--Input

--Expected
;; something before

(ns foo
  (:require
   [a]
   [b]
   [c]))

(something :after)
--Expected

# how to ns: sort imports

--Input
(ns com.example.my-app

  (:import java.io.File
           (xxx.yyy.zzz Bravo Alpha Delta Charlie)
           hhh.eee.Ccc
           hhh.eee.Bbb
           (java.util Date UUID))
  (:require com.example.my-app.bbb com.example.my-app.ccc com.example.my-app.aaa)
  )
--Input

--Expected
(ns com.example.my-app
  (:require
   [com.example.my-app.aaa]
   [com.example.my-app.bbb]
   [com.example.my-app.ccc])
  (:import
   (hhh.eee Bbb Ccc)
   (java.io File)
   (java.util Date UUID)
   (xxx.yyy.zzz Alpha Bravo Charlie Delta)))
--Expected

# how to ns: sort refer-clojure, require, import

--Input
(ns foo "bar"
  (:require b c a)
  (:import (java.util Date))
  (:refer-clojure :exclude [get ->])
  )
--Input

--Expected
(ns foo
  "bar"
  (:refer-clojure :exclude [-> get])
  (:require
   [a]
   [b]
   [c])
  (:import
   (java.util Date)))
--Expected

# sort refer-clojure :only symbols

--Input
(ns foo
  (:require bbb aaa)
  (:refer-clojure :only [get -> number? == *])
  )
--Input

--Expected
(ns foo
  (:refer-clojure :only [* -> == get number?])
  (:require
   [aaa]
   [bbb]))
--Expected

# sort refer-clojure :rename symbols

--Input
(ns foo
  (:require bbb.ccc bbb, aaa)
    (:import (java.util UUID Date))
  (:refer-clojure :rename {print core-print get g,  number? is-number
                           ->> thread-last, -> thread-first}
  )
  )
--Input

--Expected
(ns foo
  (:refer-clojure :rename {-> thread-first, ->> thread-last, get g, number? is-number, print core-print})
  (:require
   [aaa]
   [bbb]
   [bbb.ccc])
  (:import
   (java.util Date UUID)))
--Expected

# refer-clojure :rename with reader conditional

--Input
(ns com.example.my-app
  ;; comment 1
  ;; comment 2
  (:refer-clojure
    :rename {#?(:cljs [print core-print get g])}) ;; comment 3
  )
--Input

--Expected
(ns com.example.my-app
  #?(:cljs
     ;; comment 1
     ;; comment 2
     (:refer-clojure :rename {get g, print core-print}))) ;; comment 3
--Expected

# how to ns: require, as, refer

--Input
(ns com.example.my-app
  (:require
    [com.example.duck :as duck :refer [quack quacking eat sleep]]
    aaa.bbb
    [com.example.cow :refer [moo eat-grass] :as cow]))
--Input

--Expected
(ns com.example.my-app
  (:require
   [aaa.bbb]
   [com.example.cow :as cow :refer [eat-grass moo]]
   [com.example.duck :as duck :refer [eat quack quacking sleep]]))
--Expected

# ns with :refer :all

--Input
(ns com.example.my-app
  (:require
    [com.example.duck :as duck :refer :all]
    aaa.bbb
    [com.example.cow :refer [moo eat-grass] :as cow]
    [com.example.pig :refer :all]))
--Input

--Expected
(ns com.example.my-app
  (:require
   [aaa.bbb]
   [com.example.cow :as cow :refer [eat-grass moo]]
   [com.example.duck :as duck :refer :all]
   [com.example.pig :refer :all]))
--Expected

# ns with docstring

--Input
(ns com.example.my-app

  "Mary had a little lamb,
  Its fleece was white as snow.

  And everywhere that Mary went,
  The lamb was sure to go."
  (:require
    [com.example.duck :as duck :refer :all]
    aaa.bbb
    aaa))
--Input

--Expected
(ns com.example.my-app
  "Mary had a little lamb,
  Its fleece was white as snow.

  And everywhere that Mary went,
  The lamb was sure to go."
  (:require
   [aaa]
   [aaa.bbb]
   [com.example.duck :as duck :refer :all]))
--Expected

# ns with require comments

--Input
;; before

(ns com.example.my-app
;; foo bar
    ;; bizzle wizzle
  (:require
 ;; C
 ;; CC
 ;; CCC
 ccc ;; ccc
    [aaa.bbb :as ab] ; abab
    aaa)) ;;;; aaa

:after
--Input

--Expected
;; before

(ns com.example.my-app
  ;; foo bar
  ;; bizzle wizzle
  (:require
   [aaa] ;;;; aaa
   [aaa.bbb :as ab] ; abab
   ;; C
   ;; CC
   ;; CCC
   [ccc])) ;; ccc

:after
--Expected

# ns with prefix list

--Input
(ns com.example.my-app
  (:require
 ;; aaa
 ;; bbb
    (com.example server client routes) ;; ccc
    com.example.db
    [com.example alpha bravo])) ;; ddd
--Input

--Expected
(ns com.example.my-app
  (:require
   [com.example.alpha] ;; ddd
   [com.example.bravo]
   ;; aaa
   ;; bbb
   [com.example.client] ;; ccc
   [com.example.db]
   [com.example.routes]
   [com.example.server]))
--Expected

# ns with reader conditionals 1

> NOTE: use the standard reader conditional #?( when there are only one line per platform

--Input
(ns com.example.my-app
  (:require
    com.example.bbb
    #?(:cljs [com.example.aaa])
    #?(:clj  [com.example.ccc])
    com.example.ddd
    ))
--Input

--Expected
(ns com.example.my-app
  (:require
   [com.example.bbb]
   [com.example.ddd]
   #?(:clj [com.example.ccc]
      :cljs [com.example.aaa])))
--Expected

# ns with reader conditionals 2

--Input
;; NOTE: the :default reader conditional platform is always placed last

(ns com.example.my-app
  (:require
    #?(:clj  [com.example.eee]
       :cljs [com.example.ddd :as d] ;; ddd
       :elephant com.example.yyy)
    com.example.fff
    #?@(:cljs [com.example.bbb-cljs]
        :elephant [com.example.bbb-elephant]
        :default [com.example.bbb-default]) ;; bbb
    com.example.ccc
    #?(:clj com.example.aaa)
    ))
--Input

--Expected
;; NOTE: the :default reader conditional platform is always placed last

(ns com.example.my-app
  (:require
   [com.example.ccc]
   [com.example.fff]
   #?@(:clj
       [[com.example.aaa]
        [com.example.eee]]

       :cljs
       [[com.example.bbb-cljs]
        [com.example.ddd :as d]] ;; ddd

       :elephant
       [[com.example.bbb-elephant]
        [com.example.yyy]]

       :default
       [[com.example.bbb-default]]))) ;; bbb
--Expected

# ns with reader conditionals 3

--Input
(ns com.example.module-test
  (:require #?(:clj  [clojure.test :refer :all]
               :cljs [cljs.test :refer-macros [is]])
            #?(:cljs [cljs.test.check :refer [quick-check]]) ;; aaa
            #?(:clj  [clojure.test.check.clojure-test :refer [defspec]]
               :cljs [cljs.test.check.cljs-test :refer-macros [defspec]])
            #?(:clj  [clojure.test.check.properties :as prop]
               :cljs [cljs.test.check.properties :as prop
                       :include-macros true])
            [schema.core :as schema :refer [check]]
            [com.example.schema.ids :refer [Foo]]
            [com.example.generators
             :refer [gen-part-no gen-invalid-part-no]]))
--Input

--Expected
(ns com.example.module-test
  (:require
   [com.example.generators :refer [gen-invalid-part-no gen-part-no]]
   [com.example.schema.ids :refer [Foo]]
   [schema.core :as schema :refer [check]]
   #?@(:clj
       [[clojure.test :refer :all]
        [clojure.test.check.clojure-test :refer [defspec]]
        [clojure.test.check.properties :as prop]]

       :cljs
       [[cljs.test :refer-macros [is]]
        [cljs.test.check :refer [quick-check]] ;; aaa
        [cljs.test.check.cljs-test :refer-macros [defspec]]
        [cljs.test.check.properties :as prop :include-macros true]])))
--Expected

# reader conditionals in ns 4

--Input
(ns com.example.my-app
  (:require
    #?(:clj  [com.example.eee]
       :cljs [com.example.ddd :as d] ;; ddd
       :elephant com.example.yyy)
    com.example.fff
    #?@(:cljs [com.example.bbb-cljs]
        :elephant [com.example.bbb-elephant]
        :default [com.example.bbb-default])
    com.example.ccc
    #?(:clj com.example.aaa))

  (:import
    xxx.yyy.Zzz ;; zzz
    aaa.bbb.Ccc
    #?@(:cljs goog.string.StringBuffer ;; aaa
        :clj java.net.URI))

  #?(:clj
     (:import
      [java.io StringReader]
      java.net.InetAddress)

     :cljs
     (:import
      [goog.module ModuleManager]
      (goog.events EventType EventTarget)
      goog.Uri))) ;; uuu
--Input

--Expected
(ns com.example.my-app
  (:require
   [com.example.ccc]
   [com.example.fff]
   #?@(:clj
       [[com.example.aaa]
        [com.example.eee]]

       :cljs
       [[com.example.bbb-cljs]
        [com.example.ddd :as d]] ;; ddd

       :elephant
       [[com.example.bbb-elephant]
        [com.example.yyy]]

       :default
       [[com.example.bbb-default]]))
  (:import
   (aaa.bbb Ccc)
   (xxx.yyy Zzz) ;; zzz
   #?@(:clj
       [(java.io StringReader)
        (java.net InetAddress URI)]

       :cljs
       [(goog Uri) ;; uuu
        (goog.events EventTarget EventType)
        (goog.module ModuleManager)
        (goog.string StringBuffer)]))) ;; aaa
--Expected

# all requires on one platform

--Input
(ns com.example.my-app
  ;; comment 1
  (:require ;; comment 2
    #?@(:clj
        [[bbb] ;; bbb
         [aaa]]))) ;; aaa
--Input

--Expected
(ns com.example.my-app
  #?(:clj
     ;; comment 1
     (:require ;; comment 2
      [aaa] ;; aaa
      [bbb]))) ;; bbb
--Expected

# ns: figwheel.main

--Input
(ns figwheel.main
  #?(:clj
     (:require
      [cljs.analyzer :as ana]
      [cljs.analyzer.api :as ana-api]
      [cljs.build.api :as bapi]
      [cljs.compiler]
      [cljs.closure]
      [cljs.cli :as cli]
      [cljs.env]
      [cljs.main :as cm]
      [cljs.repl]
      [cljs.repl.figwheel]
      [cljs.util]
      [clojure.data.json :as json]
      [clojure.java.io :as io]
      [clojure.pprint :refer [pprint]]
      [clojure.string :as string]
      [clojure.edn :as edn]
      [clojure.java.shell :as sh]
      [clojure.tools.reader.edn :as redn]
      [clojure.tools.reader.reader-types :as rtypes]
      [clojure.walk :as walk]
      [figwheel.core :as fw-core]
      [figwheel.main.ansi-party :as ansip]
      [figwheel.main.logging :as log]
      [figwheel.main.util :as fw-util]
      [figwheel.main.watching :as fww]
      [figwheel.main.helper :as helper]
      [figwheel.main.npm :as npm]
      [figwheel.main.async-result :as async-result]
      [figwheel.main.react-native :as react-native]
      [figwheel.main.testing :as testing]
      [figwheel.repl :as fw-repl]
      [figwheel.main.compat.ana-api :as ana-compat]
      [figwheel.tools.exceptions :as fig-ex]
      [certifiable.main :as certifiable]
      [certifiable.log]))
  #?(:clj
     (:import
      [java.io StringReader]
      java.net.InetAddress
      java.net.URI
      java.net.URLEncoder
      java.nio.file.Paths))
  #?(:cljs
     (:require-macros [figwheel.main])))
--Input

--Expected
(ns figwheel.main
  #?(:cljs
     (:require-macros
      [figwheel.main]))
  #?(:clj
     (:require
      [certifiable.log]
      [certifiable.main :as certifiable]
      [cljs.analyzer :as ana]
      [cljs.analyzer.api :as ana-api]
      [cljs.build.api :as bapi]
      [cljs.cli :as cli]
      [cljs.closure]
      [cljs.compiler]
      [cljs.env]
      [cljs.main :as cm]
      [cljs.repl]
      [cljs.repl.figwheel]
      [cljs.util]
      [clojure.data.json :as json]
      [clojure.edn :as edn]
      [clojure.java.io :as io]
      [clojure.java.shell :as sh]
      [clojure.pprint :refer [pprint]]
      [clojure.string :as string]
      [clojure.tools.reader.edn :as redn]
      [clojure.tools.reader.reader-types :as rtypes]
      [clojure.walk :as walk]
      [figwheel.core :as fw-core]
      [figwheel.main.ansi-party :as ansip]
      [figwheel.main.async-result :as async-result]
      [figwheel.main.compat.ana-api :as ana-compat]
      [figwheel.main.helper :as helper]
      [figwheel.main.logging :as log]
      [figwheel.main.npm :as npm]
      [figwheel.main.react-native :as react-native]
      [figwheel.main.testing :as testing]
      [figwheel.main.util :as fw-util]
      [figwheel.main.watching :as fww]
      [figwheel.repl :as fw-repl]
      [figwheel.tools.exceptions :as fig-ex]))
  #?(:clj
     (:import
      (java.io StringReader)
      (java.net InetAddress URI URLEncoder)
      (java.nio.file Paths))))
--Expected

# ns: figwheel.main.testing

--Input
(ns figwheel.main.testing
  (:require
   [clojure.string :as string]
   #?@(:cljs [[figwheel.main.async-result :as async-result]
              [goog.dom :as gdom]
              [cljs.test :refer [report]]]
       :clj [[cljs.analyzer]
             [figwheel.main.logging :as log]
             [figwheel.main.util :as fw-util]
             [clojure.java.io :as io]])))
--Input

--Expected
(ns figwheel.main.testing
  (:require
   [clojure.string :as string]
   #?@(:clj
       [[cljs.analyzer]
        [clojure.java.io :as io]
        [figwheel.main.logging :as log]
        [figwheel.main.util :as fw-util]]

       :cljs
       [[cljs.test :refer [report]]
        [figwheel.main.async-result :as async-result]
        [goog.dom :as gdom]])))
--Expected

# ns: cuerdas.core

--Input
(ns cuerdas.core
  (:refer-clojure :exclude [contains? empty? repeat regexp?
                            replace reverse chars keyword concat
                            #?@(:clj [unquote format])])
  #?(:cljs (:require-macros [cuerdas.core :refer [unsafe-concat nilv]])) ;; require-macros!
  (:require [clojure.string :as str]
            [clojure.set :refer [map-invert]]
            [clojure.core :as c]

            [clojure.walk :refer [stringify-keys]]
            [cuerdas.regexp :as rx]

            #?(:cljs [goog.string :as gstr]) ;; ggg
            #?(:cljs [cljs.reader :as edn] ;; cljs-edn
               :clj  [clojure.edn :as edn])) ;; clj-edn
  #?(:clj (:import (java.util List Locale) ;; lll
                   (aaa.bbb Ddd Ccc)))) ;; aaa
--Input

--Expected
(ns cuerdas.core
  (:refer-clojure
    :exclude [chars concat contains? empty? keyword regexp? repeat replace reverse
              #?@(:clj [format unquote])])
  #?(:cljs
     (:require-macros
      [cuerdas.core :refer [nilv unsafe-concat]])) ;; require-macros!
  (:require
   [clojure.core :as c]
   [clojure.set :refer [map-invert]]
   [clojure.string :as str]
   [clojure.walk :refer [stringify-keys]]
   [cuerdas.regexp :as rx]
   #?@(:clj
       [[clojure.edn :as edn]] ;; clj-edn

       :cljs
       [[cljs.reader :as edn] ;; cljs-edn
        [goog.string :as gstr]])) ;; ggg
  #?(:clj
     (:import
      (aaa.bbb Ccc Ddd) ;; aaa
      (java.util List Locale)))) ;; lll
--Expected

# ns: metabase.util

--Input
(ns metabase.util
  "Common utility functions useful throughout the codebase."
  (:require
   #?@(:clj ([clojure.math.numeric-tower :as math]
             [me.flowthing.pp :as pp]
             [metabase.config :as config]
             [metabase.util.string :as u.str]
             [potemkin :as p]
             #_{:clj-kondo/ignore [:discouraged-namespace]}
             [metabase.util.jvm :as u.jvm]
             [ring.util.codec :as codec]))
   [camel-snake-kebab.internals.macros :as csk.macros]
   [clojure.data :refer [diff]]
   [clojure.pprint :as pprint]
   [clojure.set :as set]
   [clojure.string :as str]
   [clojure.walk :as walk]
   [flatland.ordered.map :refer [ordered-map]]
   [medley.core :as m]
   [metabase.shared.util.i18n :refer [tru] :as i18n]
   [metabase.shared.util.namespaces :as u.ns]
   [metabase.util.format :as u.format]
   [metabase.util.log :as log]
   [metabase.util.memoize :as memoize]
   [net.cgrand.macrovich :as macros]
   [weavejester.dependency :as dep])
  #?(:clj (:import
           (clojure.lang Reflector)
           (java.text Normalizer Normalizer$Form)
           (java.util Locale)
           (org.apache.commons.validator.routines RegexValidator UrlValidator)))
  #?(:cljs (:require-macros [camel-snake-kebab.internals.macros :as csk.macros]
                            [metabase.util])))

#?(:clj (set! *warn-on-reflection* true))
--Input

--Expected
(ns metabase.util
  "Common utility functions useful throughout the codebase."
  #?(:cljs
     (:require-macros
      [camel-snake-kebab.internals.macros :as csk.macros]
      [metabase.util]))
  (:require
   [camel-snake-kebab.internals.macros :as csk.macros]
   [clojure.data :refer [diff]]
   [clojure.pprint :as pprint]
   [clojure.set :as set]
   [clojure.string :as str]
   [clojure.walk :as walk]
   [flatland.ordered.map :refer [ordered-map]]
   [medley.core :as m]
   [metabase.shared.util.i18n :as i18n :refer [tru]]
   [metabase.shared.util.namespaces :as u.ns]
   [metabase.util.format :as u.format]
   [metabase.util.log :as log]
   [metabase.util.memoize :as memoize]
   [net.cgrand.macrovich :as macros]
   [weavejester.dependency :as dep]
   #?@(:clj
       [[clojure.math.numeric-tower :as math]
        [me.flowthing.pp :as pp]
        [metabase.config :as config]
        #_{:clj-kondo/ignore [:discouraged-namespace]}
        [metabase.util.jvm :as u.jvm]
        [metabase.util.string :as u.str]
        [potemkin :as p]
        [ring.util.codec :as codec]]))
  #?(:clj
     (:import
      (clojure.lang Reflector)
      (java.text Normalizer Normalizer$Form)
      (java.util Locale)
      (org.apache.commons.validator.routines RegexValidator UrlValidator))))

#?(:clj (set! *warn-on-reflection* true))
--Expected

# ambiguous import comment

> FIXME: how to handle this situation?

--Input
(ns com.example.my-app
  (:import
    java.net.URI ;; aaa
    java.net.InetAddress)) ;; bbb
--Input

--Expected
(ns com.example.my-app
  (:import
   (java.net InetAddress URI)))
--Expected

# require-macros with no reader conditional

> If :require-macros is not wrapped in a reader conditional, then it is probably inside of a .cljs file

--Input
(ns com.example.my-app
  (:require
    [aaa.bbb :as bbb])
  (:require-macros
    [ccc.ddd :as d :refer [hhh ggg]]))
--Input

--Expected
(ns com.example.my-app
  (:require-macros
   [ccc.ddd :as d :refer [ggg hhh]])
  (:require
   [aaa.bbb :as bbb]))
--Expected

# require-macros with reader conditional

> Else wrap the entire :require-macros form inside a reader conditional

--Input
(ns com.example.my-app
  (:require
    [aaa.bbb :as bbb])
  #?(:cljs
     (:require-macros
       [ccc.ddd :as d :refer [hhh ggg]]))) ;; ddd
--Input

--Expected
(ns com.example.my-app
  #?(:cljs
     (:require-macros
      [ccc.ddd :as d :refer [ggg hhh]])) ;; ddd
  (:require
   [aaa.bbb :as bbb]))
--Expected

# ns: require-macros comments 1

--Input
;; alpha

(ns bar.core
  (:require-macros
    [foo.core :refer [bad add cad]] ;; rad
    [aaa.bbb :refer [ccc]] ;; ddd
    ))

;; bravo
--Input

--Expected
;; alpha

(ns bar.core
  (:require-macros
   [aaa.bbb :refer [ccc]] ;; ddd
   [foo.core :refer [add bad cad]])) ;; rad

;; bravo
--Expected

# ns: require-macros comments 2

--Input
;; alpha

(ns bar.core
  (:require-macros
    [foo.core :refer [bad add cad]] ;; rad
    [aaa.bbb :refer [ccc]])) ;; ddd

;; bravo
--Input

--Expected
;; alpha

(ns bar.core
  (:require-macros
   [aaa.bbb :refer [ccc]] ;; ddd
   [foo.core :refer [add bad cad]])) ;; rad

;; bravo
--Expected

# basic refer-clojure with :only

--Input
(ns com.example.my-app
  (:refer-clojure :only [dissoc conj]))
--Input

--Expected
(ns com.example.my-app
  (:refer-clojure :only [conj dissoc]))
--Expected

# refer-clojure with reader conditionals 1

> If all of the :refer-clojure symbols are specific to a single platform,
> wrap the entire :refer-clojure form for that platform.

--Input
(ns com.example.my-app
  (:refer-clojure :only [#?@(:cljs [dissoc conj])]))
--Input

--Expected
(ns com.example.my-app
  #?(:cljs
     (:refer-clojure :only [conj dissoc])))
--Expected

# refer-clojure with reader conditionals 2

> We have a mix of symbols for all platforms and specific platforms.
> Add newlines and use reader conditionals inside of the symbol list.

--Input
(ns com.example.my-app
  (:refer-clojure :only [get assoc #?@(:clj [dissoc conj]
                                       :cljs [partition frequencies])]))
--Input

--Expected
(ns com.example.my-app
  (:refer-clojure
    :only [assoc get
           #?@(:clj [conj dissoc]
               :cljs [frequencies partition])]))
--Expected

# refer-clojure with reader conditionals 3

> It would be nice if the formatter could do this all on one line for some cases.
> FIXME: need to double-check this reader conditional syntax

--Input
(ns com.example.my-app
  (:refer-clojure :only [get assoc #?@(:cljs [dissoc conj])]))
--Input

--Expected
(ns com.example.my-app
  (:refer-clojure
    :only [assoc get
           #?@(:cljs [conj dissoc])]))
--Expected

# refer-clojure with reader conditionals 4

> FIXME: need to double-check this reader conditional syntax

--Input
(ns com.example.my-app
  (:refer-clojure :only [#?@(:cljs [dissoc conj]
                             :clj [partition frequencies int])]))
--Input

--Expected
(ns com.example.my-app
  (:refer-clojure
    :only #?@(:clj [frequencies int partition]
              :cljs [conj dissoc])))
--Expected

# refer-clojure with reader conditionals 5

> FIXME: need to double-check this reader conditional syntax

--Input
(ns com.example.my-app
  (:refer-clojure :exclude [#?@(:cljs [dissoc conj]
          :clj [partition frequencies int])]))
--Input

--Expected
(ns com.example.my-app
  (:refer-clojure
    :exclude #?@(:clj [frequencies int partition]
                 :cljs [conj dissoc])))
--Expected

# refer-clojure with reader conditionals 6

--Input
(ns com.example.my-app
  (:refer-clojure :exclude [get assoc #?@(:cljs [dissoc conj])]))
--Input

--Expected
(ns com.example.my-app
  (:refer-clojure
    :exclude [assoc get
              #?@(:cljs [conj dissoc])]))
--Expected

# refer-clojure with multiple clauses

--Input
(ns cljs.ns-test
  (:refer-clojure :rename {mapv core-mapv} :exclude [+ for])  )
--Input

--Expected
(ns cljs.ns-test
  (:refer-clojure
    :exclude [+ for]
    :rename {mapv core-mapv}))
--Expected

# ClojureScript ns test 2

> I wonder if this example should have some line breaks?

--Input
(ns cljs.ns-test
  (:refer-clojure :exclude [+ for] :rename {mapv core-mapv})
  (:require-macros [clojure.core :as lang :refer [when when-let] :rename {when always
                                                                          when-let always-let}]
                   [cljs.test :refer [is deftest]]))
--Input

--Expected
(ns cljs.ns-test
  (:refer-clojure
    :exclude [+ for]
    :rename {mapv core-mapv})
  (:require-macros
   [cljs.test :refer [deftest is]]
   [clojure.core :as lang :refer [when when-let] :rename {when always, when-let always-let}]))
--Expected

# basic gen-class

--Input
(ns com.example.my-app
  (:gen-class)
  (:require [aaa.bbb :as ab])
  )
--Input

--Expected
(ns com.example.my-app
  (:require
   [aaa.bbb :as ab])
  (:gen-class))
--Expected

# gen-class with reader conditional

--Input
(ns com.example.my-app
  #?(:clj (:gen-class) )
  (:require [aaa.bbb :as ab])
  )
--Input

--Expected
(ns com.example.my-app
  (:require
   [aaa.bbb :as ab])
  #?(:clj
     (:gen-class)))
--Expected

# gen-class with simple values and comments

> TODO: is the indentation for :gen-class what we want here?

--Input
(ns com.example.my-app
  "gen-class with comments and simple values"
  ;; aaa
  ;; bbb
  (:gen-class ;; ccc


    ;; fff
    :extends java.lang.RuntimeException ;; ggg
    :impl-ns iii
    :post-init jjj
    :main true
    :state state2
    :prefix "zzz-"

    ;; ddd
    :name name2 ;; eee

    :factory fff
    :load-impl-ns false ;; hhh
    :init init2)


  (:require [aaa.bbb :as ab])
  )
--Input

--Expected
(ns com.example.my-app
  "gen-class with comments and simple values"
  (:require
   [aaa.bbb :as ab])
  ;; aaa
  ;; bbb
  (:gen-class ;; ccc
   ;; ddd
   :name name2 ;; eee
   ;; fff
   :extends java.lang.RuntimeException ;; ggg
   :init init2
   :post-init jjj
   :main true
   :factory fff
   :state state2
   :prefix "zzz-"
   :impl-ns iii
   :load-impl-ns false)) ;; hhh
--Expected

# reader macro comments

> FIXME: this is a tricky case, need to think of a way to improve the spacing for the discard map

--Input
(ns com.example.my-app
  (:require
    ccc.ddd #_ #{"bugger"}
    #_ {:alpha "alpha"
        :bravo "bravo"}
    [aaa.bbb]))
--Input

--Expected
(ns com.example.my-app
  (:require
   #_ {:alpha "alpha"
        :bravo "bravo"}
   [aaa.bbb]
   [ccc.ddd])) #_ #{"bugger"}
--Expected

# require-macros wrapped in reader conditional, last main form

> https://github.com/oakmac/standard-clojure-style-js/issues/76

--Input
(ns com.example.my-app
  #?(:cljs (:require-macros [bar :refer [baz]])))
--Input

--Expected
(ns com.example.my-app
  #?(:cljs
     (:require-macros
      [bar :refer [baz]])))
--Expected

# require-macros wrapped in reader conditional, not last main form

--Input
(ns com.example.my-app
  (:require [aaa])
  #?(:cljs (:require-macros [bar :refer [baz]])))
--Input

--Expected
(ns com.example.my-app
  #?(:cljs
     (:require-macros
      [bar :refer [baz]]))
  (:require
   [aaa]))
--Expected

# support :refer :exclude

> https://github.com/oakmac/standard-clojure-style-js/issues/74

--Input
(ns com.example.my-app
  (:require
    [incanter.core :refer :all :exclude [ggg zzz abs]]
    [bbb.ccc :exclude [yyy hhh eee] :refer :all]
    ) )
--Input

--Expected
(ns com.example.my-app
  (:require
   [bbb.ccc :refer :all :exclude [eee hhh yyy]]
   [incanter.core :refer :all :exclude [abs ggg zzz]]))
--Expected

# :require :as-alias

> https://github.com/oakmac/standard-clojure-style-js/issues/69

--Input
(ns com.example.my-app
  (:require
    [incanter.core :as-alias ic]
    [bbb.ccc :exclude [yyy hhh eee] :refer :all]
    ) )
--Input

--Expected
(ns com.example.my-app
  (:require
   [bbb.ccc :refer :all :exclude [eee hhh yyy]]
   [incanter.core :as-alias ic]))
--Expected

# refer-clojure rename with comment and reader conditional

> https://github.com/oakmac/standard-clojure-style-js/issues/48

--Input
(ns com.example.my-app
  (:refer-clojure :rename
    {get core-get
     #?@(:clj [conj core-conj])}))
     ;:cljs [conj core-conj2])}))
--Input

--Expected
(ns com.example.my-app
  (:refer-clojure
    :rename {get core-get
             #?@(:clj [conj core-conj])}))
     ; :cljs [conj core-conj2])}))
--Expected

# refer-clojure rename with reader conditional and multiple platforms

--Input
(ns com.example.my-app
  (:refer-clojure :rename
    {get core-get
     #?@(:clj [conj core-conj]
              :cljs [conj core-conj2])}))
--Input

--Expected
(ns com.example.my-app
  (:refer-clojure
    :rename {get core-get
             #?@(:clj [conj core-conj]
                 :cljs [conj core-conj2])}))
--Expected

# GitHub Issue #111 - comments above :require-macros

> https://github.com/oakmac/standard-clojure-style-js/issues/111

--Input
(ns com.example.my-app
  ;; comment1
  #_{:clj-kondo/ignore [:unused-referred-var]}
  (:require-macros [other.ns :refer [one two]])
  (:require
    [aaa :as bbb]
    ))
--Input

--Expected
(ns com.example.my-app
  ;; comment1
  #_{:clj-kondo/ignore [:unused-referred-var]}
  (:require-macros
   [other.ns :refer [one two]])
  (:require
   [aaa :as bbb]))
--Expected

# GitHub Issue #111 - comments above :require-macros with reader conditional

> https://github.com/oakmac/standard-clojure-style-js/issues/111

--Input
(ns com.example.my-app
  (:require [aaa :as bbb] )
#?(:cljs
  ;; comment1
  #_{:clj-kondo/ignore [:unused-referred-var]}
  (:require-macros [other.ns :refer [one two]])
  )
  )
--Input

--Expected
(ns com.example.my-app
  #?(:cljs
     ;; comment1
     #_{:clj-kondo/ignore [:unused-referred-var]}
     (:require-macros
      [other.ns :refer [one two]]))
  (:require
   [aaa :as bbb]))
--Expected

# GitHub Issue #112 - extra options in JS requires

> https://github.com/oakmac/standard-clojure-style-js/issues/112

--Input
(ns com.example.my-app
  (:require
    ["@foo/bar"
      :rename {Charlie Delta Alpha Bravo }]
    ))
--Input

--Expected
(ns com.example.my-app
  (:require
   ["@foo/bar" :rename {Alpha Bravo, Charlie Delta}]))
--Expected

# GitHub Issue #114 - refer-clojure with reader conditional

> https://github.com/oakmac/standard-clojure-style-js/issues/114

--Input
(ns com.example.my-app
#?(:clj
   (:refer-clojure :exclude [aaa ccc bbb])

   :cljs
   (:refer-clojure :exclude [ddd aaa])
   ,))
--Input

--Expected
(ns com.example.my-app
  (:refer-clojure
    :exclude #?@(:clj [aaa bbb ccc]
                 :cljs [aaa ddd])))
--Expected

# GitHub Issue #55 - metadata in ns 1

--Input
(ns ^{:deprecated "0.1.0"} com.example.my-app
  (:require [clojure.string]))
--Input

--Expected
(ns com.example.my-app
  {:deprecated "0.1.0"}
  (:require
   [clojure.string]))
--Expected

# GitHub Issue #55 - metadata in ns 2

--Input
(ns ^:foo/bar com.example.my-app)
--Input

--Expected
(ns com.example.my-app
  {:foo/bar true})
--Expected

# GitHub Issue #55 - metadata in ns 3

--Input
(ns com.example.my-app {:foo 45, :bar [:a :b :c {}]})
--Input

--Expected
(ns com.example.my-app
  {:foo 45
   :bar [:a :b :c {}]})
--Expected

# GitHub Issue #55 - metadata in ns 4

--Input
(ns ^{:foo bar} weeble.ns {:foo baz}
  (:require [clojure.string]))
--Input

--Expected
(ns weeble.ns
  {:foo baz}
  (:require
   [clojure.string]))
--Expected

# GitHub Issue #113 - metadata in ns 5

--Input
(ns com.example.my-app {:dev/always true}
  (:require [clojure.string]))
--Input

--Expected
(ns com.example.my-app
  {:dev/always true}
  (:require
   [clojure.string]))
--Expected

# GitHub Issue #113 - metadata in ns 6

--Input
(ns ^:dev/always com.example.my-app (:require [clojure.string]))
--Input

--Expected
(ns com.example.my-app
  {:dev/always true}
  (:require
   [clojure.string]))
--Expected

# GitHub Issue #113 - metadata in ns 7

--Input
(ns ^{:dev/always true} com.example.my-app (:require [clojure.string]))
--Input

--Expected
(ns com.example.my-app
  {:dev/always true}
  (:require
   [clojure.string]))
--Expected

# GitHub Issue #126 - metadata in ns 8

--Input
(ns ^{:added "0.12.0"} com.example.my-app
  "some docstring!"
  (:require [clojure.string]))
--Input

--Expected
(ns com.example.my-app
  "some docstring!"
  {:added "0.12.0"}
  (:require
   [clojure.string]))
--Expected

# cljs.analyzer example

> https://github.com/clojure/clojurescript/blob/master/src/main/clojure/cljs/analyzer.cljc

--Input
(ns cljs.analyzer
  #?(:clj  (:refer-clojure :exclude [ensure macroexpand-1])
     :cljs (:refer-clojure :exclude [ensure js-reserved macroexpand-1 ns-interns]))
  #?(:cljs (:require-macros [cljs.analyzer.macros
                             :refer [allowing-redef disallowing-ns* disallowing-recur
                                     no-warn with-warning-handlers wrapping-errors]]
             [cljs.env.macros :refer [ensure]]))
  #?(:clj  (:require [cljs.analyzer.impl :as impl]
                     [cljs.analyzer.impl.namespaces :as nses]
                     [cljs.analyzer.passes.and-or :as and-or]
                     [cljs.env :as env :refer [ensure]]
                     [cljs.externs :as externs]
                     [cljs.js-deps :as deps]
                     [cljs.tagged-literals :as tags]
                     [cljs.util :as util :refer [ns->relpath topo-sort]]
                     [clojure.edn :as edn]
                     [clojure.java.io :as io]
                     [clojure.set :as set]
                     [clojure.string :as string]
                     [cljs.vendor.clojure.tools.reader :as reader]
                     [cljs.vendor.clojure.tools.reader.reader-types :as readers])
     :cljs (:require [cljs.analyzer.impl :as impl]
                     [cljs.analyzer.impl.namespaces :as nses]
                     [cljs.analyzer.passes.and-or :as and-or]
                     [cljs.env :as env]
                     [cljs.reader :as edn]
                     [cljs.tagged-literals :as tags]
                     [cljs.tools.reader :as reader]
                     [cljs.tools.reader.reader-types :as readers]
                     [clojure.set :as set]
                     [clojure.string :as string]
                     [goog.string :as gstring]))
  #?(:clj (:import [cljs.tagged_literals JSValue]
                   [clojure.lang Namespace Var LazySeq ArityException]
                   [java.io File Reader PushbackReader]
                   [java.lang Throwable]
                   [java.net URL]
                   [java.util.regex Pattern])))

#?(:clj (set! *warn-on-reflection* true))

;; User file-local compiler flags
#?(:clj (def ^:dynamic *unchecked-if* false))
#?(:clj (def ^:dynamic *unchecked-arrays* false))
--Input

--Expected
(ns cljs.analyzer
  (:refer-clojure
    :exclude #?@(:clj [ensure macroexpand-1]
                 :cljs [ensure js-reserved macroexpand-1 ns-interns]))
  #?(:cljs
     (:require-macros
      [cljs.analyzer.macros :refer [allowing-redef disallowing-ns* disallowing-recur no-warn with-warning-handlers wrapping-errors]]
      [cljs.env.macros :refer [ensure]]))
  (:require
   #?@(:clj
       [[cljs.analyzer.impl :as impl]
        [cljs.analyzer.impl.namespaces :as nses]
        [cljs.analyzer.passes.and-or :as and-or]
        [cljs.env :as env :refer [ensure]]
        [cljs.externs :as externs]
        [cljs.js-deps :as deps]
        [cljs.tagged-literals :as tags]
        [cljs.util :as util :refer [ns->relpath topo-sort]]
        [cljs.vendor.clojure.tools.reader :as reader]
        [cljs.vendor.clojure.tools.reader.reader-types :as readers]
        [clojure.edn :as edn]
        [clojure.java.io :as io]
        [clojure.set :as set]
        [clojure.string :as string]]

       :cljs
       [[cljs.analyzer.impl :as impl]
        [cljs.analyzer.impl.namespaces :as nses]
        [cljs.analyzer.passes.and-or :as and-or]
        [cljs.env :as env]
        [cljs.reader :as edn]
        [cljs.tagged-literals :as tags]
        [cljs.tools.reader :as reader]
        [cljs.tools.reader.reader-types :as readers]
        [clojure.set :as set]
        [clojure.string :as string]
        [goog.string :as gstring]]))
  #?(:clj
     (:import
      (cljs.tagged_literals JSValue)
      (clojure.lang ArityException LazySeq Namespace Var)
      (java.io File PushbackReader Reader)
      (java.lang Throwable)
      (java.net URL)
      (java.util.regex Pattern))))

#?(:clj (set! *warn-on-reflection* true))

;; User file-local compiler flags
#?(:clj (def ^:dynamic *unchecked-if* false))
#?(:clj (def ^:dynamic *unchecked-arrays* false))
--Expected

# GitHub Issue #135 - portal.runtime.cson before

--Input
(ns ^:no-doc portal.runtime.cson
  "Clojure/Script Object Notation"
  (:refer-clojure :exclude [read])
  #?(:clj  (:require [portal.runtime.json-buffer :as json])
     :cljr (:require [portal.runtime.json-buffer :as json])
     :joyride
     (:require
      [portal.runtime.json-buffer :as json]
      [portal.runtime.macros :as m])
     :org.babashka/nbb
     (:require
      [portal.runtime.json-buffer :as json]
      [portal.runtime.macros :as m])
     :cljs
     (:require
      [goog.crypt.base64 :as Base64]
      [portal.runtime.json-buffer :as json]
      [portal.runtime.macros :as m]))
  #?(:clj  (:import [java.net URL]
                    [java.util Base64 Date UUID])
     :joyride (:import)
     :org.babashka/nbb (:import)
     :cljs (:import [goog.math Long])))

(defprotocol ToJson (-to-json [value buffer]))
--Input

--Expected
(ns portal.runtime.cson
  "Clojure/Script Object Notation"
  {:no-doc true}
  (:refer-clojure :exclude [read])
  (:require
   #?@(:clj
       [[portal.runtime.json-buffer :as json]]

       :cljr
       [[portal.runtime.json-buffer :as json]]

       :cljs
       [[goog.crypt.base64 :as Base64]
        [portal.runtime.json-buffer :as json]
        [portal.runtime.macros :as m]]

       :joyride
       [[portal.runtime.json-buffer :as json]
        [portal.runtime.macros :as m]]

       :org.babashka/nbb
       [[portal.runtime.json-buffer :as json]
        [portal.runtime.macros :as m]]))
  (:import
   #?@(:clj
       [(java.net URL)
        (java.util Base64 Date UUID)]

       :cljs
       [(goog.math Long)])))

(defprotocol ToJson (-to-json [value buffer]))
--Expected

# GitHub Issue #135 - portal.runtime.cson after

--Input
(ns portal.runtime.cson
  "Clojure/Script Object Notation"
  {:no-doc true}
  (:refer-clojure :exclude [read])
  (:require
   #?@(:clj
       [[portal.runtime.json-buffer :as json]]

       :cljr
       [[portal.runtime.json-buffer :as json]]

       :cljs
       [[goog.crypt.base64 :as Base64]
        [portal.runtime.json-buffer :as json]
        [portal.runtime.macros :as m]]

       :joyride
       [[portal.runtime.json-buffer :as json]
        [portal.runtime.macros :as m]]

       :org.babashka/nbb
       [[portal.runtime.json-buffer :as json]
        [portal.runtime.macros :as m]]))
  (:import
   #?@(:clj
       [(java.net URL)
        (java.util Base64 Date UUID)]

       :cljs
       [(goog.math Long)])))

(defprotocol ToJson (-to-json [value buffer]))
--Input

--Expected
(ns portal.runtime.cson
  "Clojure/Script Object Notation"
  {:no-doc true}
  (:refer-clojure :exclude [read])
  (:require
   #?@(:clj
       [[portal.runtime.json-buffer :as json]]

       :cljr
       [[portal.runtime.json-buffer :as json]]

       :cljs
       [[goog.crypt.base64 :as Base64]
        [portal.runtime.json-buffer :as json]
        [portal.runtime.macros :as m]]

       :joyride
       [[portal.runtime.json-buffer :as json]
        [portal.runtime.macros :as m]]

       :org.babashka/nbb
       [[portal.runtime.json-buffer :as json]
        [portal.runtime.macros :as m]]))
  (:import
   #?@(:clj
       [(java.net URL)
        (java.util Base64 Date UUID)]

       :cljs
       [(goog.math Long)])))

(defprotocol ToJson (-to-json [value buffer]))
--Expected

# GitHub Issue #140 - :refer-clojure comments 1

--Input
(ns com.example.my-app
  ;; aaa
  ;; bbb
  (:refer-clojure :only [number? -> set]) ; ccc
  )
--Input

--Expected
(ns com.example.my-app
  ;; aaa
  ;; bbb
  (:refer-clojure :only [-> number? set])) ; ccc
--Expected

# GitHub Issue #140 - :refer-clojure comments 2

--Input
(ns com.example.my-app
  ;; aaa
  ;; bbb
  (:refer-clojure :only [number? -> set ; ccc
  ]))
--Input

--Expected
(ns com.example.my-app
  ;; aaa
  ;; bbb
  (:refer-clojure :only [-> number? set])) ; ccc
--Expected

# GitHub Issue #140 - :refer-clojure comments 3

--Input
(ns com.example.my-app
  (:require [aaa])
  ;; aaa
  ;; bbb
  (:refer-clojure :only [number? -> set]) ; ccc
  )
--Input

--Expected
(ns com.example.my-app
  ;; aaa
  ;; bbb
  (:refer-clojure :only [-> number? set]) ; ccc
  (:require
   [aaa]))
--Expected

# GitHub Issue #140 - :refer-clojure comments 4

--Input
(ns com.example.my-app
  (:require [aaa])
  ;; aaa
  ;; bbb
  #?(:clj
     (:refer-clojure :only [number? -> set])) ;; ccc
  )
--Input

--Expected
(ns com.example.my-app
  #?(:clj
     ;; aaa
     ;; bbb
     (:refer-clojure :only [-> number? set])) ;; ccc
  (:require
   [aaa]))
--Expected

# GitHub Issue #140 - :refer-clojure comments 5

--Input
(ns com.example.my-app
  ;; aaa
  ;; bbb
  #?(:clj
     (:refer-clojure :only [number? -> set])) ;; ccc
  )
--Input

--Expected
(ns com.example.my-app
  #?(:clj
     ;; aaa
     ;; bbb
     (:refer-clojure :only [-> number? set]))) ;; ccc
--Expected

# GitHub Issue #142 - bug with reader conditionals

--Input
(ns ^{:doc "ClojureScript wrapper functions for math operations"
      :author "Paula Gearon" }
    cljs.math
  ;; create space to load this in Clojure for testing
  #?@(:clj ((:refer-clojure :exclude [aset aget + unsigned-bit-shift-right bit-shift-right bit-shift-left])
            (:require [js :refer [aset aget +]])
            (:import [js ArrayBuffer Uint8Array Uint32Array Float64Array]))))
--Input

--Expected
(ns cljs.math
  {:doc "ClojureScript wrapper functions for math operations"
   :author "Paula Gearon"}
  #?(:clj
     ;; create space to load this in Clojure for testing
     (:refer-clojure :exclude [+ aget aset bit-shift-left bit-shift-right unsigned-bit-shift-right]))
  #?(:clj
     (:require
      [js :refer [+ aget aset]]))
  #?(:clj
     (:import
      (js ArrayBuffer Float64Array Uint32Array Uint8Array))))
--Expected

# GitHub Issue #158 - ClojureScript require default

> https://github.com/oakmac/standard-clojure-style-js/issues/158

--Input
(ns com.example.my-app
  (:require
       ["react-select" :default Select]
       ["react-dropzone" :default Dropzone]
       ["react-select/creatable" :default CreatableSelect]))
--Input

--Expected
(ns com.example.my-app
  (:require
   ["react-dropzone" :default Dropzone]
   ["react-select" :default Select]
   ["react-select/creatable" :default CreatableSelect]))
--Expected
